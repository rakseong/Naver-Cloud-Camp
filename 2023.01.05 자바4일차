자바 4일차

용어정리

domain : 영역
validation check : 유효성 검사, 입력된 값이 유효한지 확인하는 과정
return : 어떠한 메소드의 끝을 나타내며, 메소드의 자료형에따라 return 값이 바뀐다.
Unicode : 전 세계의 모든 문자를 다루도록 설계된 표준 문자 전산 처리 방식 
public : 모든 곳에서 접근 가능
protected : 자기 자신 클래스와 상속된 클래스에서 접근 가능, 외부에서 변수에 직접접근이 불가능하지만 상속받은 클래스에서 접근이 가능
private : 자기 자신 클래스에서만 접근 가능, 외부에서 클래스 변수에 직접접근할 수 없고, 클래스의 메소드를 통해서만 접근 가능
argument : 함수 혹은 메서드를 호출할 때 전달 혹은 입력되는 실제 값
methodOverloading : 자바의 한 클래스 내에서 이미 사용되는 이름이 있더라도 사용되는 argument가 다르면 같은 이름이라도 메소드를 
정의할 수 있다.
methodOverriding : 부모 클래스로부터 상속받은 메소드를 자식 클래스에서 재정의 하는 것
Bean : 특정 정보 등을 가지고 main 메소드를 가지고 있지 않아 실행할 수 없는 클래스 파일
Interface : 동일한 목적 하에 동일한 기능을 수행하게끔 갖에하는 것으로 자바의 다형성을 극대화하여 개발코드 수정을 줄이고 프로그램
유지 보수성을 높일 수 있다.
new : 어떠한 클래스를 실제로 사용할 수 있도록 메모리에 적재하는 keyword

수업 내용

**OOP 개념 재정리

Object(객체) : 현실세계에서 표현될 수 있는 모든 것(사물, 행위, 상태 등등)

Class : 객체로 표현된 모든 것들 중 공통되는 특징을 바탕으로 묶어 틀로 만들어 놓은 것

Abstract : 공통된 특징을 가지고 속성(Attribute), 행위(Metohd)를 추출하는 작업
=> 객체를 추상화하는 작업을 거쳐 Class로 만들 수 있다.

Instance : class라는 틀을 기반으로 실제로 메모리에 할당되어 실제 사용되는 변수를 말하며 이 변수는 주소값을 가진 reference 변수이다.
=> A a = new A() 에서 a가 인스턴스, new라는 keyword를 통해 메모리에 적재

Realization : class라는 틀을 가지고 메모리에 적재하여 실제로 사용할 수 있도록 하는 작업

Inheritance : 어떠한 class가 구체화될 때, 구체화 될 내용들의 공통되는 부분이 존재한다. 그 내용들을 부모 클래스로 구성하여 공유하게
해서 코드의 재사용성, 유지보수성이 높아질 수 있다.

Specialization : 커다란 개념에서 작은 개념으로 나뉘는 작업으로 구체화 될수록 여러가지 class로 나뉘어지며 자기 자신이 공통되는 변수를
상속할수도, 상속받아올수도 있다. 보통 상속되는 내용이 더 많을 것이다.

Generalization : 작은 개념에서 큰 개념으로 합쳐지는 것으로 일반화 될수록 class의 범위가 넓어지며 자기 자신이 공통되는 변수를
상속할수도, 상속받아올수도 있다. 보통 상속하는 내용이 더 많을 것이다.

Polymorphism : 개발자와 상호작용할 수 있는 메소드, 클래스, 장치 등의 하나의 인터페이스가 있다. 그 인터페이스를 메소드명이라고 한다면
한 클래스 내에서 같은 이름을 이용해 여러가지 형태의 메소드로 중복 선언할 수 있도록 하는 것은 메소드 오버로딩, 다른 클래스를 상속받으며
상속받은 클래스와 같은 이름의 메소드명이 있으면 부모클래스의 메소드를 덮어쓰기 하는 메소드 오버라이딩 등으로 사용할 수 있다. 이렇게 
하나의 인터페이스로 다양한 역할을 수행하게 하는 것이 다형성이다.


자바 3일차

용어정리
readability : 가독성
prefix operator : 전치 연산자(++i)
postifx operator : 후치 연산자(i++)
HLL(High Level Language) : 고급언어, 사람친화적일수록 HLL
LLL(Low Level Language) : 저급언어, 기계친화적일수록 LLL
refactoring : 결과의 변경 없이 코드의 구조를 재조정하는 작업, 가독성을 높이고 유지보수를 편하게 하기 위한 작업
API(Application Programming Interface) :  프로그램을 작성하기 위한 일련의 sub프로그램, 우리가 코딩에서 사용하는 다양한 데이터,
method, 자료형 등 다양한 형태로 지원해주며 이를 실제로 구현하여 사용할 수 있는 것을 라이브러리라고 부른다.
Array : 배열, 같은 Data Type의 묶음
reference : 참조, 배열같은 경우 Array를 선언할 때 선언한 변수에는 배열의 주소값이 들어가며 변수를 호출할 때마다 주소값으로 배열을
참조해 사용하게 된다.
Call by Value : 호출 시 값을 넘겨준다.
Call by Reference : 호출 시 주소를 넘겨준다.

**OperatorTest.java
1. 증가, 감소 연산자 (--,++)
: 전치연산자이면 증가 후 자신을 포함한 코드 실행(++i)
: 후치연산자이면 자신을 포함한 코드 실행 후 증가(i++)
2. 나머지 연산자(%)
3. 3항 연산자( (조건식)?참일 때:거짓일 때)

**IfElse01.java
1. 비교연산자 (> < >= <= == !=)
2. 분기문 if-else (분기 추가 : else if)
: 분기문에는 반드시 조건문이며 boolean 이어야 함.

**IfElse02.java
1. AND : &, && 연산자
: (조건문) & (조건문) => 무조건 모든 조건문 확인
: (조건문) & (조건문) => 앞선 조건문의 연산결과 여부에 따라 뒤에 조건문 실행(앞에 조건문이 F면 뒤에 조건 안보고 F 반환)
2. OR : |, || 연산자
: (조건문) | (조건문) => 무조건 모든 조건문 확인
: (조건문) | (조건문) => 앞선 조건문의 연산결과 여부에 따라 뒤에 조건문 실행(앞에 조건문이 T면 뒤에 조건 안보고 T 반환)

**IfETC.java
1. 문자를 int DataType으로 변경 => Integer.parseInt(s) 사용
2. 특수문자 사용 => \t, \n, \"

**SwitchTest.java
1. switch 조건값은 무조건 상수(정수형)
2. break를 하지 않으면 break를 만날 때 까지 모든 case문 실행

**ForTest.java
1. for(초기값;조건;변화값)
2. while(조건)문
3. do ... while(조건) => 무조건 한번 실행 후 조건 검증

**BreakTest.java
1. keyword : break => 자신이 속한 반복문은 종료
2. keyword : continue => 자신이 속한 반복문 이후 실행문 중단, 다시 반복문 실행

**ArrayTest.java
1. Array : 같은 Data Type의 묶음
2. Reference Data Type : 주소값을 이용해 참조하는 변수들, int, char, boolean 등 제외하고 모드 참조 변수
3. new : keyword



**객체지향 용어정리

1. OOP(Object-Oriented Programming)
: 객체지향 프로그래밍은 다양한 데이터와 기능, 함수들을 객체라는 단위로 만들어 이 객체들 간의 상호작용을 통해 데이터를 처리할 수 있도록 프로그래밍 하는 방법이다. 
이렇게 해서 얻을 수 있는 장점으로 한 파일에 표현될 수 있는 거대한 파일을 여러가지 비슷한 기능, 예를 들면 db관련 함수들만 따로 모아놓고 객체를 사용해 쉽게 사용할 수 있도록 하는 것과 
같이 여러가지 기능으로 나누어 관리하기 쉬울 것이다. 또한 현실세계를 컴퓨터 프로그램으로 만들면서 객체라는 형태로 만들어 적용한다.

2. Object(객체)
: 객체는 자신이 다른것과 구분될 수 있는 식별성을 가지고 있어야 하고, 어떠한 행위를 하고 그 행위의 결과에 따라 상태가 변경될 수 있다. 
현실세계에 대입해서 생각해보면 사람이 옷을 구매하는 행위를 OOP를 사용해 프로그램으로 구현한다고 하면 실제로 옷가게에 가는 행위(물리적), 결제를 하는 행위(개념적)에 따라 상태가 변하며
나 자신이 옷을 구매하러 간다는 식별성을 가질 수 있다. 그렇기에 객체는 어떠한 프로그램에서 구체화될 수 있는 모든 것을 객체라고 하며 위 OOP에서 언급한 비슷한 데이터, 
기능끼리 모아둔 것들 자체가 객체가 될 수 있다.

3. Class
: 위에서 구체화된 행위, 사물들을 기능, 활용 방법에 따라 묶어서 사용하도록 하는것이 Class의 역할이고, 각 클래스 안에서 역할에 따라 클래스를 객체로 정의하는 것을 의미한다. 
자바에서 클래스는 객체를 생성하는 틀, 설계도와 같은 의미로 사용되며 객체의 모든 특징, 기능들을 정의해 놓을 수 있다.

4. abstraction(추상화)
: 추상화의 일반적 정의는 알고는 있지만 정확하게 표현하기 힘든 것들을 중요한 부분이나 특징점을 잡아 설명한다는 것이다. 하지만 컴퓨터에서 추상화는 복잡한 자료, 모듈, 시스템 등의 
핵심적인 개념 또는 기능을 간추려내는 것을 말한다. 그렇기에 OOP에서 추상화는 클래스를 정의할 때 불필요한 부분들을 생략하고 객체의 속성 중 중요한 것에 초점을 맞추고 
이를 통해 중복 코드가 현저히 줄어들어 코드의 재사용성이 증가하고 코드가 간결해지는 장점을 가진다.

5. Generalization(일반화) / Inheritance(상속)
: 일반화는 OOP관점에서 상속 관계라 한다. 이는 여러 객체들이 가진 공통된 특성을 가지고 하나의 개념이나 법칙으로 성립시키는 과정이다. 
즉 공통된 특징이나 행위를 하나의 클래스에 모아서 상속받고, 자식 클래스가 사용하도록 하는 것이다. 상속이라는 것은 자식 클래스(하위 클래스)가 부모 클래스(상위 클래스)에서
 다양한 데이터와 행위, 특징을 물려받는 것으로 자식 클래스에서 부모 클래스에서 정의된 내용들을 사용할 수 있게 한다.

6. Specialization(구체적)
: Generalization과 한 쌍을 이루는 개념으로 일반화가 공통된 특징이나 행위를 하나의 클래스에 모아놓는 것이라면 Specialization은 비슷한 속성과 기능을 가지고 있는 
다른 클래스를 상속 받아서 새로운 클래스를 정의하는 것이다. 그렇기에 일반화와 같이 여러군데 반복해서 만들 필요 없이 한 곳을 수정해도 다른 클래스에도 자동으로 반영될 수 있도록 하여 
편리하게 사용할 수 있다.

7. Realization
: 인터페이스란 어떤 객체가 해야 하는 일, 객체가 할 수 있는 일로 해석할 수 있다. 이러한 인터페이스를 어떤 공통되는 능력, 기능을 대표하는 것들의 공통적인 것들을 통해 
그룹화하는 것이 일반화라면 실체화는 실제로 인터페이스가 동작하는 것이 아닌, 기능들에 대하여 실체화를 통해 인터페이스의 기능들을 정의할 수 있다.

8. Association
: 나의 클래스가 다른 클래스의 일부를 사용할 때 아주 중요한 정보를 나의 클래스에서 배치해놓고 사용하고 있는 것으로,
이는 다른 클래스에서 중요한 정보를 의도적으로 뺏어가거나 삭제시키지 않는 이상 계속해서 지속되는 관계로 오랫동안 지속될 수 있는 관계이다.

9. dependency
: 나의 클래스가 다른 클래스의 일부를 사용하지만, 다른 클래스의 정보가 언급될 때만 다른 클래스에 가서 해당 정보를 가지고오는 참조하는 형태이다. 
이는 연관관계와 달리 정보가 언급될 때만 관계가 짧게 이어지기 때문에 짧게 지속되는 관계라는 특징이 있다.

10. Polymorphism
: 서로 다른 클래스 클래스A와 클래스B가 있다고 하자. 클래스A의 이름을 ‘나’로 정하고 클래스B의 이름도 ‘나’로 정하였다. 
이렇게 되면 한쪽이 클래스의 역할을 하지 못하고 오류가 날 수도 있지만 OOP에서는 한가지 이름으로 여러가지 역할을 수행할 수 있도록 할 수 있다. 
그렇게 되면 ‘나’라는 이름을 가지고 클래스A 와 클래스B 의 기능을 모두 수행할 수 있게 되는 것이다. 이것이 다형성이다.

11. Encapuslation/절차은닉/정보은닉
: Encapulation은 캡슐화라는 뜻으로 객체의 특징과 메서드에 따라 운영하고, 단순히 그 속성과 메서드를 묶어서 운영하는 것이 아니라 직접적인 접근을 통제하는 것을 의미한다.
이렇게 외부로부터 데이터를 보호하기 위해 외부에는 불필요하거나 내부적으로만 사용되는 부분을 감추기 위해 특정 속성이나 메서드를 사용할 수 없도록 하는 것을 은닉화라고 하며, 
캡슐 속에 있는 데이터와 함수를 외부에 노출시키지 않고 내부에 숨기는 것을 정보 은닉, 메서드 사용 방법만 알려주고 내부의 구현은 외부에 노출하지 않는 것을 절차은닉이라고 한다.

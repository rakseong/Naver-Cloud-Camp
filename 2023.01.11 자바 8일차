자바 7일차

용어 정리 및 수업 내용=====================================================================================================

encoding : 암호화를 의미하며 어떠한 정보를 정해진 규칙에 따라 변화하는 것
decoding : 암호화와 반대되는 개념을 가지며 암호화된 정보를 정해직 규칙에 따라 복호화하여 변화시키는 것을 말한다.
software적 객체 : API를 보면 현실세계의 다양한 기능들을 추상화한 형태이다. 이를 바탕으로 소프트웨어적 기능을 활용할 수 있도록 하는데 이것이 software적 객체이다. 
ascii code : 7비트를 가지고 알파벳, 공백, 쉼표, 특수문자 등을 표현하는 문자체계이다. 출력 못하는 33개와 출력 가능한 문자 95개로 이루어진다.
Deprecated Method : Static Method, Instance Method, Concrete Method, 와 함께 나누어지는 기준이며, 이전 버전에서 사용하였고, 현재도 사용 가능하지만 
편의성을 갖는 발전되 메서드가 생성되어 사용되지 않는 메서드. 
Generic(<E>) : 데이터 형식에 의존하지 않고, 하나의 값이 여러 다른 데이터 타입들을 가질 수 있도록 하는 방법으로 <E> 로 표현하며
E는 element를 뜻한다. E의 값에 따라 해당 Collector가 어떤 데이터타입을 가지고, 리턴할지 결정하여 묵시적, 명시적 형변환을 해야하는 번거로움을 줄인다.
Collection : 데이터의 집합, 그룹을 의미하며 다양한 형태로 데이터를 정의하고, 다룰 수 있다. 쉽게 말해 자료구조라고 말할 수 있다.
Exception : 예외는 개발자들의 실수로 인해 발생하는 오류로 try/catch, Throws를 이용해 예외에 대한 대비를 할 수 있다.
stackTrace : 예외가 발생한 지점까지 추적하는 기술로, 예외 발생 지점까지의 메모리를 탐색하여 stack형태로 출력하게 된다.

**생성자 추가 내용
생성자를 정의하지 않으면 default로 기본 생성자를 만들어준다. 하지만 생성자를 하나라도 정의해 놓는다면 default 생성자는 생성되지 않고
정의해놓은 생성자를 사용해야 한다. => 오류를 발생하지 않기위해 기본생성자를 선언하는 습관이 필요.

**information hidding 응용
1. 추상화 class를 선언한 후 getInstance()를 사용해 현재 class에서 오버라이딩하여 생성 후 인스턴스 반환 ex) Calender/ Calender클래스에서
내부에서 자체적으로 오버라이딩하여 현재 시간을 생성할 때마다 초기화 해야하기 때문에 사용한다.
2. 생성자를 private로 선언한 후 getInstance()메서드 정의하여 사용.

**wrapper 클래스
8가지 기본 자료형을 객체로서, reference하여 사용하기 위해 각 클래스의 이름으로 클래스를 만들어 인스턴스를 생성할 수 있도록 한다.
ex) Integer k = new Integer(int i);

**Collections
다양한 데이터 타입을 capcity에 수용하고, 가변적인 메모리크기를 할당하기 위해 사용하는 자료구조 형태
genelic을 사용해 자료형을 정의해주고 사용하며 편의성이 더욱 증대되었다.

1. Vector, ArrayList, Stack => index를 이용해 자료 관리
2. Map => Key,Value 를 이용해 자료관리
3. Set => 중복을 제한하고 index를 이용해 자료 관리

**예외처리
예외처리를 통해 오류 상황을 확인하고, 인지할 수 있도록 하여 오류 대응이 쉽게 하여 보안성이 높은 프로그래밍을 지향해야 한다.
자바 클래스들의 최상위 클래스는 Object, Exception들의 최상위 클래스는 Exception이다.
예외처리를 throw 해줄 때 stack구조로 표현한다. => StackTrace() - debuging에 사용
catch문에 포함된 클래스는 Object미만의 상속관계부터 사용 가능하다. ex) Object -> Throwable -> Exception -> RuntimeException -> ~~~
finally에 해당하는 내용은 return으로 종료된 후에도 실행되도록 함.(System.exit(0)은 프로세스 종료이므로 수행x
catch문은 else if와 같이 다중으로 사용 가능하며 맨 위에 설정된 Exception 종류는 최하위 Exception클래스여야 하며 밑에 정의될 수록 상위클래스로 정의해야 한다.throws 
throws는 호출한 쪽으로 예외를 던져 자신이 오류를 처리하는 것을 회피한다.

**checked Exception vs unchecked Exception
checked Exception : 개발자가 처리할 수 없는 예외 처리로 컴파일 단계에서 확인 가능하며, 반드시 throws,try/catch로 예외처리를 해야한다.
========> RuntimeException을 상속받지 않는 Exception클래스는 모두 unchecked Exception이라고 볼 수 있다.
ex) NullPointException, IndexOutOfBoundException, 등등

unchecked Exception : 개발자가 처리할 수 있는, 실수로 발생한 예외로 충분히 예상가능한 예외이다. 그래서 예외처리가 없더라도 default로 프로그램에서
에러메세지를 출력해주며 예외처리가 강제되지 않는다.
ex) IOException, SQLException 등
========> RuntimeException을 상속받지 않는 Exception클래스는 모두 unchecked Exception이라고 볼 수 있다.

자바1일차

용어정리

1. CLI(command Line Interface) : 가상 터미널 또는 터미널을 통해 컴퓨터와 상호작용
2. GUI(Graphical User Interface) : 시스템, 아이콘 등으로 이루어진 시각적인 인터페이스
3. (소프트웨어에서의)system : 현실에서 컴퓨터로 옮겨오며 삶에 편리성을 주는 것
4. 모델링 : System 구축 시 구현 전 결정하는 모든 활동 
5. coder : 코드를 작성하지만 자신이 만들고 있는 프로젝트의 목표, 정의, 계획등을 생각하지 않는
단순 구현하는 사람들
6. typer : 단순히 코드를 따라 적는 사람
7. 분석, 설계자 : 개발할 S/W를 분석, 설계하는 사람
8. 개발자 : S/W 개발에 있어서 분석, 설계 + 구현(coder)까지 모두 가능한 사람
9. UML(Unified Modeling Language) : 시스템 분석, 구현, 등 시스템 개발자와
고객 또는 개발자 상호 간의 의사소통이 원활하게 이루어지도록 표준화한 대표적인 객체지향 모델링 언어
10. OOP : 객체 지향 프로그래밍
- OOPL : OOP를 지원하는 Language
11. app(application) : O/S위에서 실행되는 응용 프로그램
12. Platform : 어떠한 기능을 수행하기 위해 꼭 필요한 S/W or H/W
ex) OS의 플랫폼 - 하드웨어, java 플랫폼 : jdk, java.class 플랫폼 : jre
13. jdk(java development kit) : java파일을 컴파일하기 위해 필요한 개발 툴 
14. jre(java runtime envirument) : class파일을 실행시키기 위한 개발 환경
15. end-User : 실제 사용자, 최종 사용자
16. J2SE(Java 2 Standard Edition) : 자바 언어를 이용하 파일을 컴파일,실행 환경을 제공하는
Platform
17. 표기법 : Notation

수업내용

1. system 개발 절차
	모델링 : system 구축 시 구현 전 결정하는 모든 행동
	- 구축할 system 정의
	- 요구사항 정의
	- 구체적인 계획(분석, 설계)
	- 결과물 : 모델(시스템, 요구사항 정의, 계획까지의 모든 과정을 문서화)
	- Notation : UML

    구현 : system 실제 구현 -> coder가 진행
	- 소스코드, 컴파일, 디버깅 등
	- 결과물 : 코드를 포함한 시스템
	- 프로그래밍 언어 : java
	
2. 실질적 개발절차
  - 요구사항 정의 -> 분석 -> 설계 -> 구현
  - 요구사항 정의 ~ 설계 : 모델링 과정
  - 구현 : 프로그래밍
  - 분석 ~ 구현에는 OOP적 요소 포함
  
3. JAVA 특징
- 객체 지향 언어
- 플랫폼에 독립적이다(Java-app의 플랫폼은 O/S이다. 하지만 O/S 종류에 따라 큰 제약이 없어 독립적이다)
: 개발자가 for window, Linux, MacOs를 만드는 이유
: java의 플랫폼은 jdk, java.class의 플랫폼은 jre, jdk jre의 플랫폼은 O/S라고 생각하면 됨, 플랫폼은 상대적인 개념
: 하지만 오라클에서 지원해줘야 하기 때문에 오라클에 종속
- 플랫폼에 독립적인 대신 속도가 낮음(다른 언어는 바로 O/S와 통신)
: 그렇기에 보통 자바는 서버용(not local)

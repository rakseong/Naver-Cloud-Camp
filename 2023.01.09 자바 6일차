자바 6일차

용어 정리 및 수업 내용=====================================================================================================

command line argument : 명령행 매개변수
validation check : 유효성 검사, 입력값에 대한 검증으로 보안 향상
System.out(0) : 실행중인 프로세스를 종료하는 매서드
signature : 프로그래밍에서는 기본형태, 예를 들어 메서드의 기본형태 등을 signature로 표현

**this,this()
클래스 자기자신을 나타내며 this.을 통해 필드 값을 참조 가능하고, this()를 통해 자기 자신의 생성자를 호출할 수 있다. 
추가로 다형성을 이용해 다양한 생성자 메서드를 this(arg)를 통해 사용할 수 있다. 여태까지 사용되었던 필드, 메서드는 모두 뒤에 this or super이 생략되어있다.

**super,super()
클래스가 상속받는 상위 클래스의 주소를 담은 reference변수로 부모에 있는 필드, 메서드를 바로 사용하거나 생성자를 호출할 때 사용한다.

**package
윈도우의 폴더, 리눅스의 디렉토리의 개념으로 자신의 위치가 어디인지 package를 표현하여 class끼리 통신할 수 있도록 길을 만들어주는 역할을 하기도 함.
패키지명은 오픈소스일 경우 오픈소스를 제공하는 사이트의 도메인을 거꾸로 하여 package를 표현한다. ex) bit.com => com.bit.java

**has a 관계 vs is a 관계
is a 관계는 상위클래스를 상속하여 사용하는 형태로, 상위클래스에 정의된 메서드를 오버라이딩, 오버로딩 등을 통해 영향을 행사할 수 있어 연관성이 강하다고 할 수 있다.
has a 관계는 내 클래스 필드에 다른 클래스의 인스턴스를 생성하여 /ex)A클래스의 인스턴스 생성/ 사용하는 방법으로 A의 형태의 인스턴스를 내 클래스에서 자유롭게 사용할 수 있지만
A클래스의 인스턴스일 뿐 A클래스에 직접적으로 영향을 줄 수는 없기 때문에 has a 관계라고 표현하며, 연관성이 약하다고 말할 수 있다.

**Access modifier
public : 어디에 위치하든 모두 접근할 수 있음.
protected : 같은 패키지 혹은 상속 관계의 신뢰를 가지고 있을 경우에만 접근 허용.
default : 같은 패키지에서의 신뢰를 가지고 있을 경우에만 접근 허용.
private : 외부에서 절대 접근 불가, 자기 자신(클래스 내부)에서만 접근 가능 => get,set을 통해 값을 출력, 세팅할 수 있음.
응용 : 생성자를 private로 설정하면 아무도 Instance를 생성하지 못하게 된다. 하지만 setInstance() 메서드를 선언하여 Instance를 클래스 내부에서 만들어서 return할 수 있는데
이 때 조건 등을 붙여서 자신의 접근 권한을 자신이 커스텀하여 사용할 수 있게 한다.

**static, final
서로 다른 상태를 갖게하기 위한 구현 수단
static : 인스턴스에서 일정한, 동일한 값으로 사용되어 메모리의 낭비가 발생하게 된다. 이 때 메모리에 고정된 크기를 할당하여 공유하게 함으로써 메모리 낭비를 줄이고 객체가 서로 다른
상태를 갖게 함. 컴파일 실행시 static 부분을 먼저 적재하고, JRE에서는 static에 있는 main을 가장 먼저 호출하기 때문에 main은 꼭 static이어야 한다.
method의 경우 필드 값의 변동 등 상태의 변화가 일어나지 않는 단순 행위에 해당하면 static으로 선언하여 사용한다.

final :
- Field에 사용 : 마지막 값, 한번 초기화 하면 값 변경 불가 (PI = 3.14)
- Method에 사용 : 오버라이딩 불가
- Class에 사용 : 상속 받기, 상속하기 불가
